
using NAudio.Wave.SampleProviders;
using NAudio.Wave.WaveFormats;
using System.Diagnostics;
using NAudio;
using NAudio.Wave;
using static PXCMPersonTrackingData.PersonJoints;

namespace SoftwareprojektTheremin
{

        int frequenz = 35;
        float volume = 0.5F;
        Thread ton;     

        public MainWindow()
        {
            
            // Start Update thread
            update = new Thread(new ThreadStart(Update));
            update.Start();

            //Start Ton thread 
             ton = new Thread(delegate () { gen(frequenz, volume); });
             ton.Start();

        }

        public static void gen(int freq, float volume)
        {
            // keine Tonausgabe, falls Freuqenz kleiner als 37
            if (freq < 37) { }
            else
            {
                WaveOut _waveOutGene = new WaveOut();
                SignalGenerator wg = new SignalGenerator();
                wg.Type = SignalGeneratorType.Sin;
                wg.Frequency = freq;
                _waveOutGene.Volume = volume;

                _waveOutGene.Init(wg);

                //solange Ton ausgeben bis Thread beendet wird
                while (true)
                {
                    _waveOutGene.Play();
                }
                _waveOutGene.Dispose();
            }
        }

        private void Update()
        {

                for (int i = 0; i<2; i++)
                {
                    blobData.QueryBlobByAccessOrder(i, PXCMBlobData.AccessOrderType.ACCESS_ORDER_NEAR_TO_FAR, out blobList[i]);
                }
                if (blobData.QueryNumberOfBlobs() == 2)
                {
                    if (blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x > blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x)
                    {
                        Right = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        Left = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                    }
                    else
                    {
                        Right = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        Left = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                    }
                }


                // Tonausgabe: aktuelle Tonausgabe beenden und neue beginnen
                frequenz = (int) Left;
                volume = Right/100;
                if ((volume > 1) || (volume <= 0))
                { volume = 0.5F; }
                ton.Abort();
                ton = new Thread(delegate () { gen(frequenz, volume); });
                ton.Start();

                ....
