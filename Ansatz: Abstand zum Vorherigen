    // Variablen zum Speichern der Blobkoordinaten   
       
        private int x0;
        private int y0;
        private int x1;
        private int y1;
        private bool start = false;
        
          public MainWindow()
        {
            ...

            // Start Update thread
            update = new Thread(new ThreadStart(Update));
            start = true;
            update.Start();
            ...
        }
        
        private void Update()
        {
        ...
         if (start = false)
                {
                    //aktuelle Blobdaten
                    if (blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x < blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x)
                    {
                        akt_y0 = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        akt_x0 = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x;

                        akt_y1 = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        akt_x1 = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x;
                    }

                    else
                    {
                        akt_y1 = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        akt_x1 = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x;

                        akt_y0 = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        akt_x0 = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x;
                    }

                    //Quadrat des euklidischen Abstands zwischen den aktuellen Punkten und den vorhergehenden
                    diff0 = (akt_x0 - x0) * (akt_x0 - x0) + (akt_y0 - y0) * (akt_y0 - y0);
                    diff1 = (akt_x1 - x1) * (akt_x1 - x1) + (akt_y1 - y1)* (akt_y1 - y1);


                    if (diff0 < 100)
                    {
                        x0 = akt_x0;
                        y0 = akt_y0;
                    }

                    if (diff1 < 100)
                    {
                        x1 = akt_x1;
                        y1 = akt_y1;
                    }

                }

                // für erstes Bild
                    if (start = true)
                {
                    start = false;
                    // setzen der aktuellen Koordinaten als Ausgang fürs nächste Bild
                    if (blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x < blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x)
                    {
                        y0 = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        x0 = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x;

                        y1 = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        x1 = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x;
                    }

                    else
                    {
                        y1 = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        x1 = blobList[0].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x;

                        y0 = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).y;
                        x0 = blobList[1].QueryExtremityPoint(PXCMBlobData.ExtremityType.EXTREMITY_CENTER).x;
                    }
                }
                
        ...
        }
